// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: login.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_digest) VALUES ($1, $2, $3) RETURNING id
`

type CreateUserParams struct {
	Username       string
	Email          string
	PasswordDigest string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.PasswordDigest)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_digest FROM users WHERE email = $1
`

type GetUserRow struct {
	ID             int32
	Username       string
	Email          string
	PasswordDigest string
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordDigest,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, password_digest FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID             int32
	Username       string
	Email          string
	PasswordDigest string
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordDigest,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users SET email = $2 WHERE id = $1
`

type UpdateEmailParams struct {
	ID    int32
	Email string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.ID, arg.Email)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE users SET username = $2 WHERE id = $1
`

type UpdateUsernameParams struct {
	ID       int32
	Username string
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUsername, arg.ID, arg.Username)
	return err
}
