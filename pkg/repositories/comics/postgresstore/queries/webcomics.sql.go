// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: webcomics.sql

package queries

import (
	"context"
	"database/sql"
)

const addComic = `-- name: AddComic :exec
INSERT INTO webcomic (ordinal, user_id, title,
                      base_url, first_comic_url, latest_comic_url, rss_url,
                      updates_monday, updates_tuesday, updates_wednesday,
                      updates_thursday, updates_friday, updates_saturday, updates_sunday,
                      active, nsfw, last_read)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
`

type AddComicParams struct {
	Ordinal          sql.NullInt32
	UserID           int32
	Title            string
	BaseUrl          sql.NullString
	FirstComicUrl    sql.NullString
	LatestComicUrl   sql.NullString
	RssUrl           sql.NullString
	UpdatesMonday    bool
	UpdatesTuesday   bool
	UpdatesWednesday bool
	UpdatesThursday  bool
	UpdatesFriday    bool
	UpdatesSaturday  bool
	UpdatesSunday    bool
	Active           bool
	Nsfw             bool
	LastRead         sql.NullTime
}

func (q *Queries) AddComic(ctx context.Context, arg AddComicParams) error {
	_, err := q.db.ExecContext(ctx, addComic,
		arg.Ordinal,
		arg.UserID,
		arg.Title,
		arg.BaseUrl,
		arg.FirstComicUrl,
		arg.LatestComicUrl,
		arg.RssUrl,
		arg.UpdatesMonday,
		arg.UpdatesTuesday,
		arg.UpdatesWednesday,
		arg.UpdatesThursday,
		arg.UpdatesFriday,
		arg.UpdatesSaturday,
		arg.UpdatesSunday,
		arg.Active,
		arg.Nsfw,
		arg.LastRead,
	)
	return err
}

const addRssItem = `-- name: AddRssItem :exec
INSERT INTO rss_items (webcomic_id, user_id, guid, title, link)
VALUES ($1, $2, $3, $4, $5)
`

type AddRssItemParams struct {
	WebcomicID int32
	UserID     int32
	Guid       string
	Title      string
	Link       string
}

func (q *Queries) AddRssItem(ctx context.Context, arg AddRssItemParams) error {
	_, err := q.db.ExecContext(ctx, addRssItem,
		arg.WebcomicID,
		arg.UserID,
		arg.Guid,
		arg.Title,
		arg.Link,
	)
	return err
}

const listComics = `-- name: ListComics :many
SELECT webcomic_id, ordinal, user_id, title,
       base_url, first_comic_url, latest_comic_url, rss_url,
       updates_monday, updates_tuesday, updates_wednesday,
       updates_thursday, updates_friday, updates_saturday, updates_sunday,
       active, nsfw, last_read
FROM webcomic WHERE user_id = $1
`

func (q *Queries) ListComics(ctx context.Context, userID int32) ([]Webcomic, error) {
	rows, err := q.db.QueryContext(ctx, listComics, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Webcomic
	for rows.Next() {
		var i Webcomic
		if err := rows.Scan(
			&i.WebcomicID,
			&i.Ordinal,
			&i.UserID,
			&i.Title,
			&i.BaseUrl,
			&i.FirstComicUrl,
			&i.LatestComicUrl,
			&i.RssUrl,
			&i.UpdatesMonday,
			&i.UpdatesTuesday,
			&i.UpdatesWednesday,
			&i.UpdatesThursday,
			&i.UpdatesFriday,
			&i.UpdatesSaturday,
			&i.UpdatesSunday,
			&i.Active,
			&i.Nsfw,
			&i.LastRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markItemRead = `-- name: MarkItemRead :exec
UPDATE rss_items
SET is_read = $3
WHERE
    user_id = $1
  AND guid = $2
`

type MarkItemReadParams struct {
	UserID int32
	Guid   string
	IsRead bool
}

func (q *Queries) MarkItemRead(ctx context.Context, arg MarkItemReadParams) error {
	_, err := q.db.ExecContext(ctx, markItemRead, arg.UserID, arg.Guid, arg.IsRead)
	return err
}
